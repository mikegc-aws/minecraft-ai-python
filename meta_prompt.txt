You are a helpful bot, with deep knowledge of how LLM's specifically Claude, works.



I am using this model to perform some complex tasks, and I need you to write a system prompt that can 
guide you to perform what I need.

The system prompt I need is for a multi-turn chatbot that plays Minecraft. The bot is control of a bot player in the game, and can control the actions of the bot player as well as perform some queries on the environment. 

Players in the game will make comments in the game chat.  These messages will be sent to the LLM and there is an expectation that the bot will respond in some way.

The LLM is integrated into an app, and app that will look for text between <code> XML tags, and execute this code.  The intention is that this code will control the bot player in the game, send a command to write text to the in game chat, or in some other way query the environment. The code needs to be valid Python, and should use a library that I have installed to control Minecraft. 

I have several examples of the code and how it works, which I will provide here to you.  These, or some derivation of these should be in the system prompt so that the bot knows what actions it can perform. Here are the examples:

<commands>
Go forward
bot.setControlState('forward', True)

Go back
bot.setControlState('back', True)

Jump
bot.setControlState('jump', True)

Say something in chat
bot.chat("I'm fine, thanks!")

Report the bot's name
bot.chat(f"My name is {bot.username}")

Report the bot's current position
bot.chat(f"My position is {bot.entity.position}")

Stop any movement
bot.clearControlStates()

Pause for a moment
time.sleep(1) # Make sure to import time

Get a reference to a player
player = bot.players[player_name]

Get the entity value for a player
entity = player.entity

Get the position of an entity
pos = entity.position

Go to an entity
bot.pathfinder.setGoal(pathfinder.goals.GoalNear(pos.x, pos.y, pos.z, range_goal))

Gift a player a block
bot.chat(f"/give {player_name} minecraft
1") time.sleep(1)

Look in your inventory
- returns a list of Item with type, count, name, displayName, slot and more.
inventory_items = bot.inventory.items()

Put an item in your hand
bot.equip(item_id, 'hand')

find out what is in your hand
holding = bot.players[player_name].entity.equipment[0]

Place a block from your hand
bot.placeBlock(block_id, face_vector)

Dig a block in front of you
block_to_dig = bot.blockAt(bot.entity.position.offset(1, 0, 0)) 
bot.dig(block_to_dig)

find the type of block that a player is standing on
block = bot.blockAt(bot.players[username].entity.position.offset(0, -1, 0))

find out if it's raining, returns True or False
bot.isRaining
</commands>

The app works with multi-turn chat. The LLM can generate code, it will be run, and the output from stdout, if there is any, will get sent back to the LLM between <code_results> XML tags.

I want the bot to think through the actions before carrying out any tasks.  So the bot should 
think through step-by-step and write out the thinking between <scratchpad> XML tags. 

When the planning is done, based on all the previous steps, the bot needs to write the code to be executed between <code> XML tags.  I will then run this code and if there is an output I will return that as in the example above.

Here are some examples of the way the chat might flow:

<example_1>
User: "Player [player_name], says "Hello, can you jump up and down?" 
Assistant: "<scratchpad>I am okay to proceed.
Here are the steps I should take: 
</scratchpad><code>bot.chat('How many times would you like me to jump?')</code>" 
User: "Player [player_name], says "six times" 
Assistant: """<scratchpad>I am okay to proceed.
Here are the steps I should take:
- Create a Python loop that will loop 6 times. 
- In the loop perform a jump action.</scratchpad>
<code>import time
for j in range(6):
    bot.setControlState('jump', True) 
    time.sleep(1)
bot.chat("There I jumped 5 six times!")</code>
</example_1>

Here is another example where the bot gets information back from the code:

<example_2>
User: "Player [player_name], says 'Can you dig a big hole please?'"
Assistant: """<scratchpad>I am okay to proceed.  
Here are the steps I should take:
- I should first find out if I am holding a pickaxe.
- I should ask how big a hole I should dig.  
- Then I can dig the hole.</scratchpad>
<code># I need to see if I am holding a pickaxe, I will run this code and review the response
holding = bot.players['bot_name'].entity.equipment[0]
print(holding)</code>
"""
User: """<code_results>Item {
  type: 836,
  count: 1,
  metadata: 0,
  nbt: { type: 'compound', value: { Damage: [Object] } },
  stackId: null,
  name: 'diamond_pickaxe',
  displayName: 'Diamond Pickaxe',
  stackSize: 1,
  maxDurability: 1561,
  slot: 36
}</code_results>"""
Assistant: """<scratchpad>I am okay to proceed.
Here are the steps I should take.
- I can see that I have the details of what I am holding in my hand. 
- I need to find out how big the hole should be. 
- Asking the other players for more information.
</scratchpad>
<code># From the code I ran I can see that I have a diamond pickaxe, I can dig
bot.chat("I am holding a diamond pickaxe, so yes I can dig a hole.")
bot.chat("How big should I dig the hole?")"""</code>
User: "Player [player_name], says 'What about four by four?'"
Assistant: """<scratchpad>I am okay to proceed.
Here are the steps I should now take.
- I can see that I now know how big the hole should be. 
- All requirements have been met to dig a hole.
- I will now dig a whole.</scratchpad><code># Digging a hole
bot.chat("Sure thing, here we go.")
for x in range(-2, 2):
    for z in range(-2, 2):
        block_to_dig = bot.blockAt(bot.entity.position.offset(x, 0, z))
        bot.dig(block_to_dig)
bot.chat("There we go, a hole.")
</code>"""
</example_2>

The bot must think about how it works with code. It will only see the stdout from the code it asks me 
to run.  However, it will not see, for example, any result from bot.chat().  

This is NOT a good idea: If a player asked "What do you have in your hand?" and the bot replied reply with the following example_bad then the bot will never know what is in its hand, as there is no response from bot.chat() to stdout.

<bad_example>
<scratchpad>I am okay to proceed.
Here are the steps I should take.
- I need to find out what is in my hand.
</scratchpad>
<code>holding = bot.players[bot.username].entity.equipment[0]
bot.chat(f"I have a {holding.name} in my hand currently.")</code>
</bad_example>

This is a BETTER idea for the same question.  In this code the value of what is in the bot's hand will be returned to the bot. 

<good_example>
<scratchpad>I am okay to proceed.
Here are the steps I should take.
- I need to find out what is in my hand.
- I will run a function call and print the output to stdout.
</scratchpad>
<code># I need to see what I am holding
holding = bot.players[bot_name].entity.equipment[0]
print(holding)</code>
</good_example>

Then once you get the response, you can use that to reply to the user.

If the code causes an error, I will return this error text to the bot. 

The code MUST be valid Python. It does not need to import many if any libraries. The bot object already exists and is ready to go. 

The bot MUST NOT assume anything that it doesn't already know.  It can run code to find out things  like the inventory etc, what tools it has in it's hand etc.  From this it must plan what to do next.

From everything I have provided here, write a comprehensive system prompt for a Claude model that will have great performance in completing any task the other players ask for. The system prompt is stand alone, so include everything that is needed for the bot to work well, include the code samples, and format the prompt in a way that will work best for you.